/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.quatrix;

import com.google.common.base.Function;
import io.swagger.client.model.FileRenameResp;
import io.swagger.client.model.FileResp;
import io.swagger.client.model.IdsResp;
import org.mule.api.annotations.ConnectionStrategy;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.lifecycle.Stop;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.quatrix.api.QuatrixApi;
import org.quatrix.model.FileIds;
import org.quatrix.model.FileInfo;
import org.quatrix.model.FileMetadata;
import org.quatrix.model.FileRenameResult;
import org.quatrix.model.Job;
import org.quatrix.strategy.QuatrixConnectorConnectionStrategy;
import org.quatrix.util.CollectionUtils;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name = "quatrix", schemaVersion = "1.0-SNAPSHOT", friendlyName = "Quatrix", minMuleVersion = "3.9.0")
public class QuatrixConnector {

    //TODO: move to config class
    //A @Configurable field can not repeat the name of any parameter that belongs to the @Connect method
//    @Configurable
    private String username = "alexeykrynka@gmail.com";

    //TODO: move to config class
    //A @Configurable field can not repeat the name of any parameter that belongs to the @Connect method
//    @Configurable
    private String password = "Quatrix_Connector";

    private QuatrixApi quatrixApi;

    /**
     * Connection Strategy
     */
    @ConnectionStrategy
    QuatrixConnectorConnectionStrategy connectionStrategy;

    @Stop
    public void onStop() {
        this.quatrixApi.close();
    }

    /**
     *  Get user home directory metadata.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:home-metadata}
     *
     * @param content if '1' then directory content will be included in response
     * @return {@link FileMetadata}
     * @throws org.quatrix.api.QuatrixApiException if Quatrix API is not available or network issues
     */
    @Processor
    public FileMetadata homeMetadata(@Default("true") Boolean content) {
        return this.quatrixApi.getHomeDirMeta(content);
    }

    /**
     *  Rename file.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:rename-file}
     *
     * @param uuid
     * @param newFileName
     * @param resolve if 'true' then possible name conflict will be resolved automatically
     * @return {@link FileRenameResult}
     * @throws org.quatrix.api.QuatrixApiException if Quatrix API is not available or network issues
     */
    @Processor
    public FileRenameResult renameFile(UUID uuid, String newFileName, @Default("true") Boolean resolve) {
        return this.quatrixApi.renameFile(uuid, newFileName, resolve);
    }

    /**
     *  Delete files.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:delete-files}
     *
     * @param ids
     * @return {@link FileIds}
     * @throws org.quatrix.api.QuatrixApiException if Quatrix API is not available or network issues
     */
    @Processor
    public FileIds deleteFiles(List<String> ids) {
        return this.quatrixApi.deleteFiles(CollectionUtils.map(ids, new Function<String, UUID>() {
            @Override
            public UUID apply(String s) {
                return UUID.fromString(s);
            }
        }));
    }

    /**
     *  Download single or multiple files. If defined more than 1 file will get ZIP archive.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:download-file}
     *
     * @param fileIds File ids for download
     * @param path Destination path on local filesystem
     * @throws org.quatrix.api.QuatrixApiException if Quatrix API is not available or network issues
     */
    @Processor
    public void downloadFile(List<String> fileIds, String path) throws IOException {
        File file = this.quatrixApi.download(CollectionUtils.map(fileIds, new Function<String, UUID>() {
            @Override
            public UUID apply(String s) {
                return UUID.fromString(s);
            }
        }));

        Files.move(file.toPath(), Paths.get(path));
    }

    /**
     *  Upload single file.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:download-file}
     *
     * @param filePath File path on local file system
     * @param parentId Id of target folder where file should be placed
     * @param fileName File name
     * @param resolveConflict if true then API automatically resolve any file name conflicts
     * @throws org.quatrix.api.QuatrixApiException if Quatrix API is not available or network issues
     */
    @Processor
    public void uploadFile(String filePath, String parentId, String fileName, boolean resolveConflict) {
        this.quatrixApi.upload(
            Paths.get(filePath).toFile(),
            UUID.fromString(parentId),
            fileName, resolveConflict
        );
    }

    /**
     * Copy files to new target.
     *
     * {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:copy-files}
     *
     * @param ids list of files
     * @param target destination directory
     * @param resolve if 'true' then possible name conflict will be resolved automatically
     *
     * @return {@link Job}
     *
     * @throws org.quatrix.api.QuatrixApiException if Quatrix API is not available or network issues
     */
    @Processor
    public Job copyFiles(List<String> ids, String target, @Default("true") Boolean resolve) {
        final List<UUID> uuids = CollectionUtils.map(ids, new Function<String, UUID>() {
            @Override
            public UUID apply(String s) {
                return UUID.fromString(s);
            }
        });
        return this.quatrixApi.copyFiles(uuids, UUID.fromString(target), resolve);
    }

    /**
     *  Create directory.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:create-dir}
     *
     * @param target destination directory
     * @param dirName name directory
     * @param resolve if 'true' then possible name conflict will be resolved automatically
     * @return {@link FileResp}
     * @throws org.quatrix.api.QuatrixApiException if Quatrix API is not available or network issues
     */
    @Processor
    public FileInfo createDir(String target, String dirName, @Default("true") Boolean resolve) {
        return this.quatrixApi.createDir(UUID.fromString(target), dirName, resolve);
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Get Connection Strategy
     */
    public QuatrixConnectorConnectionStrategy getConnectionStrategy() {
        return connectionStrategy;
    }

    /**
     * Set Connection Strategy
     *
     * @param connectionStrategy Connection Strategy
     */
    public void setConnectionStrategy(QuatrixConnectorConnectionStrategy connectionStrategy) {
        this.quatrixApi = connectionStrategy.getQuatrix();
        this.connectionStrategy = connectionStrategy;
    }
}
