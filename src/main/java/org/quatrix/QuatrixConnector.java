/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.quatrix;

import com.google.common.base.Function;
import io.swagger.client.ApiClient;
import io.swagger.client.model.FileMetadataGetResp;
import io.swagger.client.model.IdsReq;
import io.swagger.client.model.IdsResp;
import org.mule.api.MuleException;
import org.mule.api.annotations.ConnectionStrategy;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.lifecycle.Stop;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.quatrix.api.QuatrixApi;
import org.quatrix.api.QuatrixApiImpl;
import org.quatrix.strategy.QuatrixConnectorConnectionStrategy;
import org.quatrix.util.CollectionUtils;

import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name = "quatrix", schemaVersion = "1.0-SNAPSHOT", friendlyName = "quatrix")
public class QuatrixConnector {

    //TODO: move to config class
    //A @Configurable field can not repeat the name of any parameter that belongs to the @Connect method
//    @Configurable
    private String username = "alexeykrynka@gmail.com";

    //TODO: move to config class
    //A @Configurable field can not repeat the name of any parameter that belongs to the @Connect method
//    @Configurable
    private String password = "Quatrix_Connector";

    private QuatrixApi quatrixApi;

    /**
     * Connection Strategy
     */
    @ConnectionStrategy
    QuatrixConnectorConnectionStrategy connectionStrategy;

    /**
     * This method initiates quatrix api client and setup basic auth params.
     */
    @Start
    public void init() {
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(username);
        apiClient.setPassword(password);
        this.quatrixApi = new QuatrixApiImpl(apiClient);
    }

    @Stop
    public void onStop() throws MuleException {
        this.quatrixApi.close();
    }

    /**
     *  Get user home directory metadata.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:home-metadata}
     *
     * @param content if '1' then directory content will be included in response
     * @return {@link FileMetadataGetResp}
     * @throws MuleException if Quatrix API is not available or network issues
     */
    @Processor
    public FileMetadataGetResp getHomeMetadata(@Optional @Default("1") BigDecimal content) throws MuleException {
        return this.quatrixApi.getHomeDirMeta(content);
    }

    //TODO: implement
    @Processor
    public void renameFile() {

    }

    /**
     *  Delete files.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:delete-files}
     *
     * @param ids
     * @return {@link IdsResp}
     * @throws MuleException if Quatrix API is not available or network issues
     */
    @Processor
    public IdsResp deleteFiles(List<String> ids) throws MuleException {
        IdsReq req = new IdsReq();
        req.setIds(ids.stream().map(id -> UUID.fromString(id)).collect(Collectors.toList()));

        return this.quatrixApi.deleteFiles(req);
    }

    //TODO: implement
    @Processor
    public void downloadFile() {

    }

    //TODO: implement
    @Processor
    public void uploadFile() {

    }

    /**
     * Copy files to new target.
     *
     * {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:copy-files}
     *
     * @param ids list of files
     * @param target destination directory
     * @param resolve if 'true' then possible name conflict will be resolved automatically
     *
     * @return {@link JobResp}
     *
     * @throws MuleException
     */
    @Processor
    public JobResp copyFiles(List<String> ids, UUID target, @Optional @Default("true") Boolean resolve) throws MuleException {
        CopyMoveFilesReq req = new CopyMoveFilesReq();

        req.setIds(CollectionUtils.map(ids, new Function<String, UUID>() {
            @Override
            public UUID apply(String s) {
                return UUID.fromString(s);
            }
        }));
        req.setTarget(target);
        req.setResolve(resolve);
        return this.quatrixApi.copyFiles(req);
    }

    /**
     *  Create directory.
     *
     *  {@sample.xml ../../../doc/Quatrix-connector.xml.sample quatrix:create-dir}
     *
     * @param target destination directory
     * @param name name directory
     * @param resolve if 'true' then possible name conflict will be resolved automatically
     * @return {@link FileResp}
     * @throws MuleException if Quatrix API is not available or network issues
     */
    @Processor
    public FileResp createDir(UUID target, String name, @Optional @Default("true") Boolean resolve) throws MuleException {
        MakeDirReq body = new MakeDirReq();
        body.setTarget(target);
        body.setName(name);
        body.setResolve(resolve);
        return this.quatrixApi.createDir(body);
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Get Connection Strategy
     */
    public QuatrixConnectorConnectionStrategy getConnectionStrategy() {
        return connectionStrategy;
    }

    /**
     * Set Connection Strategy
     *
     * @param connectionStrategy Connection Strategy
     */
    public void setConnectionStrategy(QuatrixConnectorConnectionStrategy connectionStrategy) {
        this.connectionStrategy = connectionStrategy;
    }
}
